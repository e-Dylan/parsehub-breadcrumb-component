{"version":3,"sources":["api.js","components/ContentPage.js","App.js","reportWebVitals.js","index.js"],"names":["root","type","children","home","myname","mysupersecretproject","mysupersecretfile","getContents","path","a","dir","contents","split","slice","length","i","Object","keys","map","key","index","content","fileName","fileType","push","Separator","style","margin","ContentsPage","props","useState","setContents","activeFile","setActiveFile","loading","setLoading","currentPath","setCurrentPath","crumbs","setCrumbs","api","useEffect","awaitContents","className","crumb","color","onClick","newPath","curPath","item","addCrumb","currentDir","name","ref","parent","updatePreviousCrumbs","changeDir","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.018e1c4d.chunk.js","sourcesContent":["\r\n// Root exists only on the server (api.js)\r\nlet root = {\r\n\ttype: \"dir\",\r\n\tchildren: {\r\n\t\thome: {\r\n\t\t\ttype: \"dir\",\r\n\t\t\tchildren: {\r\n\t\t\t\tmyname: {\r\n\t\t\t\t\ttype: \"dir\",\r\n\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\"filea.txt\": {\r\n\t\t\t\t\t\t\ttype: \"file\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"fileb.txt\": {\r\n\t\t\t\t\t\t\ttype: \"file\",\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"projects\": {\r\n\t\t\t\t\t\t\ttype: \"dir\",\r\n\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\tmysupersecretproject: {\r\n\t\t\t\t\t\t\t\t\ttype: \"dir\",\r\n\t\t\t\t\t\t\t\t\tchildren: {\r\n\t\t\t\t\t\t\t\t\t\tmysupersecretfile: {\r\n\t\t\t\t\t\t\t\t\t\t\ttype: \"file\",\r\n\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t}\r\n\t},\r\n};\r\n\r\n// Get contents of current directory, fill contents to render.\r\nexport async function getContents(path) {\r\n\r\n\tvar dir = root;\r\n\tvar contents = [];\r\n\t\r\n\tpath = path.split('/');\r\n\t// path initializes at the root, splice root from path.\r\n\tpath = path.slice(1, path.length);\r\n\r\n\t// go to current directory in root object:\r\n\tfor (var i = 0; i < path.length; i++) {\r\n\t\tdir = dir[\"children\"][path[i]];\r\n\t}\r\n\t// Reached directory specified by path.\r\n\tif (dir.type === \"dir\") {\r\n\t\t// current directory is a directory, contains children. return the children in contents.\r\n\t\tObject.keys(dir.children).map((key, index) => {\r\n\t\t\tvar content = {\r\n\t\t\t\tfileName: Object.keys(dir.children)[index], // string name of child object\r\n\t\t\t\tfileType: dir.children[key].type, // .type property of child object\r\n\t\t\t};\r\n\r\n\t\t\tcontents.push(content);\r\n\t\t});\r\n\t} else if (dir.type === \"file\") {\r\n\t\t// Nothing is added to the contents array, so nothing renders as\r\n\t\t// a content item in a file.\r\n\t\t// Metadata of file is displayed on frontend.\r\n\t}\r\n\treturn contents;\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport './styles/ContentPage.scss';\r\nimport './styles/Breadcrumb.scss';\r\n\r\nimport * as api from '../api';\r\n\r\nfunction Separator() {\r\n\treturn (<span style={{margin: 40 + 'px'}}>/</span>)\r\n}\r\n\r\nexport default function ContentsPage(props) {\r\n\r\n\tvar [contents, setContents] = useState([]);\r\n\tvar [activeFile, setActiveFile] = useState(null);\r\n\tvar [loading, setLoading] = useState(null); \r\n\t// Initialize path with root.\r\n\tvar [currentPath, setCurrentPath] = useState(\"root\");\r\n\tvar [crumbs, setCrumbs] = useState([currentPath]);\r\n\r\n\t// Await for backend data before rendering component.\r\n\tasync function awaitContents(path) {\r\n\t\ttry {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst contents = await api.getContents(path);\r\n\t\t\tsetContents(contents);\r\n\t\t} finally {\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t}\r\n\r\n\t// Inititalize directory at the root, and\r\n\t// update current contents whenever the current path changes.\r\n\t// update crumbs with new current path.\r\n\tuseEffect(() => {\r\n\t\tsetContents(awaitContents(currentPath));\r\n\t\tsetCrumbs(currentPath.split('/'));\r\n\t}, [currentPath]);\r\n\r\n\t// Initialize crumbs with the starting path (\"root\").\r\n\tuseEffect(() => {\r\n\t\tsetCrumbs(currentPath.split('/'));\r\n\t}, [])\r\n\r\n\t// Await the loading flag until we have data to render.\r\n\treturn loading ? \"loading...\" : (\r\n\t\t<div>\r\n\t\t\t<nav className=\"breadcrumb-nav\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t{ crumbs.map((crumb, index) => \r\n\t\t\t\t\t\t<li className=\"crumb\" key={index}>\r\n\t\t\t\t\t\t\t<Separator />\r\n\t\t\t\t\t\t\t<a \r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tcolor: (index === crumbs.length-1) ? `gray` : `#0099ff`\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t// clicked on file in breadcrumb, change to that file.\r\n\t\t\t\t\t\t\t\t// Find the new path to the index of the crumb clicked on, using the current path.\r\n\t\t\t\t\t\t\t\tvar newPath = \"\";\r\n\t\t\t\t\t\t\t\tvar curPath = currentPath.split('/');\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < index+1; i++) {\r\n\t\t\t\t\t\t\t\t\t// avoid adding a / to the end of the path.\r\n\t\t\t\t\t\t\t\t\tif (i == index)\r\n\t\t\t\t\t\t\t\t\t\tnewPath += `${curPath[i]}`\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tnewPath += `${curPath[i]}/`\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tsetCurrentPath(newPath);\r\n\t\t\t\t\t\t\t}}>{crumb}</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t) }\r\n\t\t\t\t</ol>\r\n\t\t\t\r\n\t\t\t</nav>\r\n\r\n\t\t\t<div className=\"contents-container\">\r\n\t\t\t\t<div className=\"content-bars\">\r\n\t\t\t\t\t<ul className=\"file-bar\">\r\n\t\t\t\t\t\t<li>File Name</li>\r\n\t\t\t\t\t\t<li>Type</li>\r\n\t\t\t\t\t\t<li>Created</li>\r\n\t\t\t\t\t\t<li>Modified</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t\r\n\t\t\t\t\t{ contents.map((item, index) =>\r\n\t\t\t\t\t\t// each item is a content object: {\r\n\t\t\t\t\t\t//\t\tfileName: ,\r\n\t\t\t\t\t\t//\t\tfileType: ,\r\n\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t<ul className=\"file-bar\" key={index}>\r\n\t\t\t\t\t\t\t\t<li className=\"file-name\" key={item.fileName} onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t// Update crumbs before we change dir, store reference to current dir (next dir's parent).\r\n\t\t\t\t\t\t\t\t\t\t// setCrumbs(props.addCrumb(crumbs, currentPath, item))\r\n\t\t\t\t\t\t\t\t\t\t// console.log(crumbs);\r\n\t\t\t\t\t\t\t\t\t\tsetCurrentPath(currentPath+\"/\"+item.fileName)\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (item.fileType === \"file\") \r\n\t\t\t\t\t\t\t\t\t\t\tsetActiveFile(item.fileName);\r\n\t\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\t\tsetActiveFile(null);\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\t\t{item.fileName}\r\n\t\t\t\t\t\t\t\t</li>\r\n\r\n\t\t\t\t\t\t\t\t<li>{item.fileType}</li>\r\n\t\t\t\t\t\t\t\t<li>0:00 PM</li>\r\n\t\t\t\t\t\t\t\t<li>0:00 PM</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t) }\r\n\r\n\t\t\t\t\t{/* Show active filename only if current path is a file. */}\r\n\t\t\t\t\t{ activeFile &&\r\n\t\t\t\t\t\t<div className=\"active-file\">\r\n\t\t\t\t\t\t\t<span>Current open file: </span>\r\n\t\t\t\t\t\t\t<a>{activeFile}</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import './App.css';\n\nimport { useEffect, useState } from 'react';\n\n// Components\nimport ContentPage from './components/ContentPage';\n\n// loop through entire object, at every children dir:\n// set children.parent = currentPath, give each child of object the children object.\n// in getContents - for files: use fileName: path\n\n/**\n * Clicked on a file or directory in contents, add it to breadcrumbs.\n *  \n * @param crumbs: array of current crumb items in breadcrumb at current path.\n * @param currentDir: object to current path, tracks the parent to next crumb.\n * @param item: new file that is added as the next crumb.\n */\nfunction addCrumb(crumbs, currentDir, item) {\n\tcrumbs.push({\n\t\tname: item.fileName,\n\t\tpath: item.ref,\n\t\tparent: currentDir, // parent cannot be found from the object itself. Store parent as directory which we came from.\n\t});\n\treturn crumbs;\n}\n\n/**\n * Clicked a previous directory in breadcrumb\n * \n * @param crumbs: array of current breadcrumb path items. \n * @param index: index of new path location being sent to.\n */\nfunction updatePreviousCrumbs(crumbs, index) {\n\tcrumbs = crumbs.slice(0, index+1);\n\treturn crumbs;\n}\n\nfunction changeDir(path) {\n\tvar currentDir = path;\n\treturn currentDir;\n}\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ContentPage \n\t\t\t\taddCrumb={addCrumb}\n\t\t\t\tupdatePreviousCrumbs={updatePreviousCrumbs}\n\t\t\t\tchangeDir={changeDir}\n\t\t\t/>\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}