{"version":3,"sources":["api.js","components/ContentPage.js","App.js","reportWebVitals.js","index.js"],"names":["getContents","path","a","contents","type","Object","keys","children","map","key","index","push","fileName","fileType","ref","Separator","style","margin","ContentsPage","props","useState","setContents","loading","setLoading","changeDir","root","currentDir","setCurrentDir","name","parent","undefined","crumbs","setCrumbs","awaitContents","dir","api","useEffect","className","crumb","color","length","onClick","updatePreviousCrumbs","item","addCrumb","home","myname","mysupersecretproject","mysupersecretfile","slice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RACO,SAAeA,EAAtB,kC,4CAAO,WAA2BC,GAA3B,eAAAC,EAAA,6DAEFC,EAAW,GAEH,MAARF,GACe,QAAdA,EAAKG,MACRC,OAAOC,KAAKL,EAAKM,UAAUC,KAAI,SAACC,EAAKC,GAEnCP,EAASQ,KAAK,CACbC,SAAUP,OAAOC,KAAKL,EAAKM,UAAUG,GACrCG,SAAUZ,EAAKM,SAASE,GAAKL,KAC7BH,KAAMA,EACNa,IAAKb,EAAKM,SAASE,QAZlB,kBAmBCN,GAnBD,4C,sBCMP,SAASY,IACR,OAAQ,sBAAMC,MAAO,CAACC,OAAQ,QAAtB,eAGM,SAASC,EAAaC,GAAQ,IAAD,EAEbC,mBAAS,IAFI,mBAEtCjB,EAFsC,KAE5BkB,EAF4B,OAGfD,mBAAS,MAHM,mBAGtCE,EAHsC,KAG7BC,EAH6B,OAITH,mBAASD,EAAMK,UAAUL,EAAMM,OAJtB,mBAItCC,EAJsC,KAI1BC,EAJ0B,KAOvCF,EAAO,CACVG,KAAM,OACN3B,KAAMkB,EAAMM,KACZI,YAAQC,GAVkC,EAYjBV,mBAAS,CAACK,IAZO,mBAYtCM,EAZsC,KAY9BC,EAZ8B,cAe5BC,EAf4B,8EAe3C,WAA6BC,GAA7B,eAAAhC,EAAA,sEAEEqB,GAAW,GAFb,SAGyBY,EAAgBD,GAHzC,OAGQ/B,EAHR,OAIEkB,EAAYlB,GAJd,uBAMEoB,GAAW,GANb,wEAf2C,sBA+B3C,OALAa,qBAAU,WACTf,EAAYY,EAAcd,EAAMM,SAC9B,IAGIH,EAAU,aAChB,gCACC,qBAAKe,UAAU,iBAAf,SACC,oBAAIA,UAAU,aAAd,SACGN,EAAOvB,KAAI,SAAC8B,EAAO5B,GAAR,OACZ,qBAAI2B,UAAU,QAAd,UACC,cAACtB,EAAD,IACA,mBACAC,MAAO,CACNuB,MAAQ7B,IAAUqB,EAAOS,OAAO,EAAzB,kBAERC,QAAS,WAGRd,EAAcR,EAAMK,UAAUc,EAAMrC,OACpCoB,EAAYY,EAAcK,EAAMrC,OAGhC+B,EAAUb,EAAMuB,qBAAqBX,EAAQrB,KAX9C,SAcI4B,EAAMV,SAhBgBlB,UAuB9B,sBAAK2B,UAAU,qBAAf,UACC,sBAAKA,UAAU,eAAf,UACC,qBAAIA,UAAU,WAAd,UACC,2CACA,sCACA,yCACA,6CAEClC,EAASK,KAAI,SAACmC,EAAMjC,GAAP,OAEd,qBAAI2B,UAAU,WAAd,UACE,oBAAIA,UAAU,YAAgCI,QAAS,WAErDT,EAAUb,EAAMyB,SAASb,EAAQL,EAAYiB,IAE7ChB,EAAcR,EAAMK,UAAUmB,EAAK7B,MACnCO,EAAYY,EAAcU,EAAK7B,OALjC,SAOG6B,EAAK/B,UAPuB+B,EAAKpC,UAUpC,6BAAKoC,EAAK9B,WACV,yCACA,2CAb4BH,SAoB/BqB,EAAOS,OAAS,GAA2C,SAAtCT,EAAOA,EAAOS,OAAO,GAAGvC,KAAKG,MAClD,sBAAKiC,UAAU,cAAf,UACC,uDACA,4BAAIN,EAAOA,EAAOS,OAAO,GAAGZ,gBC5FlC,IAAIH,EAAO,CACVrB,KAAM,MACNG,SAAU,CACRsC,KAAM,CACLzC,KAAM,MACNG,SAAU,CACTuC,OAAQ,CACP1C,KAAM,MACNG,SAAU,CACT,YAAa,CACZH,KAAM,QAEP,YAAa,CACZA,KAAM,QAEP,SAAY,CACXA,KAAM,MACNG,SAAU,CACTwC,qBAAsB,CACrB3C,KAAM,MACNG,SAAU,CACTyC,kBAAmB,CACnB5C,KAAM,kBAoBjB,SAASwC,EAASb,EAAQL,EAAYiB,GAMrC,OALAZ,EAAOpB,KAAK,CACXiB,KAAMe,EAAK/B,SACXX,KAAM0C,EAAK7B,IACXe,OAAQH,IAEFK,EASR,SAASW,EAAqBX,EAAQrB,GAErC,OADAqB,EAASA,EAAOkB,MAAM,EAAGvC,EAAM,GAIhC,SAASc,EAAUvB,GAElB,OADiBA,EAkBHiD,MAdf,WAEC,OACC,qBAAKb,UAAU,MAAf,SACC,cAAC,EAAD,CACCZ,KAAMA,EACNmB,SAAUA,EACVF,qBAAsBA,EACtBlB,UAAWA,OC1EA2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c90666dd.chunk.js","sourcesContent":["// Get contents of current directory, fill contents to render.\r\nexport async function getContents(path) {\r\n\r\n\tvar contents = [];\r\n\r\n\tif (path != null) {\r\n\t\tif (path.type === \"dir\") {\r\n\t\t\tObject.keys(path.children).map((key, index) => {\r\n\t\t\t\t// Map through all children (contents)\r\n\t\t\t\t\tcontents.push({\r\n\t\t\t\t\t\tfileName: Object.keys(path.children)[index],\r\n\t\t\t\t\t\tfileType: path.children[key].type,\r\n\t\t\t\t\t\tpath: path,\r\n\t\t\t\t\t\tref: path.children[key],\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n\t// console.log(contents);\r\n\treturn contents;\r\n}","import React, { useEffect, useState } from 'react';\r\n\r\nimport './styles/ContentPage.scss';\r\nimport './styles/Breadcrumb.scss';\r\n\r\nimport * as api from '../api';\r\n\r\nfunction Separator() {\r\n\treturn (<span style={{margin: 40 + 'px'}}>/</span>)\r\n}\r\n\r\nexport default function ContentsPage(props) {\r\n\r\n\tvar [contents, setContents] = useState([]);\r\n\tvar [loading, setLoading] = useState(null); \r\n\tvar [currentDir, setCurrentDir] = useState(props.changeDir(props.root));\r\n\t\r\n\t// Initialize breadcrumb with root.\r\n\tvar root = {\r\n\t\tname: 'root',\r\n\t\tpath: props.root,\r\n\t\tparent: undefined,\r\n\t}\r\n\tvar [crumbs, setCrumbs] = useState([root]);\r\n\r\n\t// Await for backend data before rendering component.\r\n\tasync function awaitContents(dir) {\r\n\t\ttry {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst contents = await api.getContents(dir);\r\n\t\t\tsetContents(contents);\r\n\t\t} finally {\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t}\r\n\r\n\t// Inititalize directory at the root.\r\n\tuseEffect(() => {\r\n\t\tsetContents(awaitContents(props.root));\r\n\t}, [])\r\n\r\n\t// Await the loading flag until we have data to render.\r\n\treturn loading ? \"loading...\" : (\r\n\t\t<div>\r\n\t\t\t<nav className=\"breadcrumb-nav\">\r\n\t\t\t\t<ol className=\"breadcrumb\">\r\n\t\t\t\t\t{ crumbs.map((crumb, index) => \r\n\t\t\t\t\t\t<li className=\"crumb\" key={index}>\r\n\t\t\t\t\t\t\t<Separator />\r\n\t\t\t\t\t\t\t<a \r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tcolor: (index === crumbs.length-1) ? `gray` : `#0099ff`\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t// clicked on file in contents, change to that file.\r\n\t\t\t\t\t\t\t\t// All files store references to their child's path.\r\n\t\t\t\t\t\t\t\tsetCurrentDir(props.changeDir(crumb.path));\r\n\t\t\t\t\t\t\t\tsetContents(awaitContents(crumb.path));\r\n\r\n\t\t\t\t\t\t\t\t// Clear breadcrumbs after this crumb.\r\n\t\t\t\t\t\t\t\tsetCrumbs(props.updatePreviousCrumbs(crumbs, index));\r\n\r\n\r\n\t\t\t\t\t\t\t}}>{crumb.name}</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t) }\r\n\t\t\t\t</ol>\r\n\t\t\t\r\n\t\t\t</nav>\r\n\r\n\t\t\t<div className=\"contents-container\">\r\n\t\t\t\t<div className=\"content-bars\">\r\n\t\t\t\t\t<ul className=\"file-bar\">\r\n\t\t\t\t\t\t<li>File Name</li>\r\n\t\t\t\t\t\t<li>Type</li>\r\n\t\t\t\t\t\t<li>Created</li>\r\n\t\t\t\t\t\t<li>Modified</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t{ contents.map((item, index) =>\r\n\t\t\t\t\r\n\t\t\t\t\t\t<ul className=\"file-bar\" key={index}>\r\n\t\t\t\t\t\t\t\t<li className=\"file-name\" key={item.children} onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t// Update crumbs before we change dir, store reference to current dir (next dir's parent).\r\n\t\t\t\t\t\t\t\t\t\tsetCrumbs(props.addCrumb(crumbs, currentDir, item))\r\n\t\t\t\t\t\t\t\t\t\t// console.log(crumbs);\r\n\t\t\t\t\t\t\t\t\t\tsetCurrentDir(props.changeDir(item.ref));\r\n\t\t\t\t\t\t\t\t\t\tsetContents(awaitContents(item.ref));\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}>{item.fileName}\r\n\t\t\t\t\t\t\t\t</li>\r\n\r\n\t\t\t\t\t\t\t\t<li>{item.fileType}</li>\r\n\t\t\t\t\t\t\t\t<li>0:00 PM</li>\r\n\t\t\t\t\t\t\t\t<li>0:00 PM</li>\r\n\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\r\n\t\t\t\t\t) }\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Show active filename only if current path is a file. */}\r\n\t\t\t\t{crumbs.length > 0 && crumbs[crumbs.length-1].path.type === \"file\" &&\r\n\t\t\t\t\t<div className=\"active-file\">\r\n\t\t\t\t\t\t<span>Current open file: </span>\r\n\t\t\t\t\t\t<a>{crumbs[crumbs.length-1].name}</a>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}","import './App.css';\n\nimport { useEffect, useState } from 'react';\n\n// Components\nimport ContentPage from './components/ContentPage';\n\n// loop through entire object, at every children dir:\n// set children.parent = currentPath, give each child of object the children object.\n// in getContents - for files: use fileName: path\n\nlet root = {\n\ttype: \"dir\",\n\tchildren: {\n\t\t\thome: {\n\t\t\t\ttype: \"dir\",\n\t\t\t\tchildren: {\n\t\t\t\t\tmyname: {\n\t\t\t\t\t\ttype: \"dir\",\n\t\t\t\t\t\tchildren: {\n\t\t\t\t\t\t\t\"filea.txt\": {\n\t\t\t\t\t\t\t\ttype: \"file\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"fileb.txt\": {\n\t\t\t\t\t\t\t\ttype: \"file\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"projects\": {\n\t\t\t\t\t\t\t\ttype: \"dir\",\n\t\t\t\t\t\t\t\tchildren: {\n\t\t\t\t\t\t\t\t\tmysupersecretproject: {\n\t\t\t\t\t\t\t\t\t\ttype: \"dir\",\n\t\t\t\t\t\t\t\t\t\tchildren: {\n\t\t\t\t\t\t\t\t\t\t\tmysupersecretfile: {\n\t\t\t\t\t\t\t\t\t\t\ttype: \"file\",\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t},\n};\n\n/**\n * Clicked on a file or directory in contents, add it to breadcrumbs.\n *  \n * @param crumbs: array of current crumb items in breadcrumb at current path.\n * @param currentDir: object to current path, tracks the parent to next crumb.\n * @param item: new file that is added as the next crumb.\n */\nfunction addCrumb(crumbs, currentDir, item) {\n\tcrumbs.push({\n\t\tname: item.fileName,\n\t\tpath: item.ref,\n\t\tparent: currentDir, // parent cannot be found from the object itself. Store parent as directory which we came from.\n\t});\n\treturn crumbs;\n}\n\n/**\n * Clicked a previous directory in breadcrumb\n * \n * @param crumbs: array of current breadcrumb path items. \n * @param index: index of new path location being sent to.\n */\nfunction updatePreviousCrumbs(crumbs, index) {\n\tcrumbs = crumbs.slice(0, index+1);\n\treturn crumbs;\n}\n\nfunction changeDir(path) {\n\tvar currentDir = path;\n\treturn currentDir;\n}\n\nfunction App() {\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ContentPage \n\t\t\t\troot={root}\n\t\t\t\taddCrumb={addCrumb}\n\t\t\t\tupdatePreviousCrumbs={updatePreviousCrumbs}\n\t\t\t\tchangeDir={changeDir}\n\t\t\t/>\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}